# -*- coding: utf-8 -*-
"""vgg16_prune.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PntvzG_5mb9stO6zJ6YIrVql28MBFTJ0
"""

from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.nn.utils.prune as prune
import torch.optim as optim
from torchvision import datasets, transforms
import time
import torchvision.ops as tv_nn
import matplotlib.pyplot as plt
from matplotlib.axis import Axis
import numpy as np
from torchsummary import summary

class VGG16(nn.Module):
    def __init__(self):
        super().__init__()
        self.layers = self._make_layers()

    def _make_layers(self):
        layers = [
            nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size = 2, stride = 2),
            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size = 2, stride = 2),
            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size = 2, stride = 2),
             nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size = 2, stride = 2),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size = 2, stride = 2),
            nn.Flatten(1),
            #input image 32*32[SVHN] conv layer output 512, 5 maxpool layer with stride 2, so, input for linear layer, 32/(2^5)
            nn.Linear(1*1*512, 4096),
            nn.ReLU(),
            nn.Linear(4096, 4096),
            nn.ReLU(),
            nn.Linear(4096, 10)]

        return nn.ModuleList(layers)

    def forward(self, x):
        for mod in self.layers:
            x = mod(x)

        output = F.log_softmax(x, dim=1)
        return output

def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    train_loss = 0

    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        train_loss += loss.item()
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Current time: {:.4f}; Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                time.time(),
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

    train_loss /= len(train_loader.dataset)
    return train_loss

def test(model, device, test_loader, epoch):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    accuracy = ( correct / len(test_loader.dataset) )*100

    print('Current time: {:.4f}; Test Epoch: {}, Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.4f}%)\n'.format(
        time.time(),
        epoch,
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

    return accuracy

def prune_model(model, pruning_rate, method):

    parameters_to_prune = [ ]

    for name, module in model.named_modules():
        if isinstance(module, nn.Conv2d) or isinstance(module, nn.Linear):
            parameters_to_prune.append((module, 'weight'))

    if method=='L1':
        prune.global_unstructured(
            parameters_to_prune,
            pruning_method=prune.L1Unstructured,
            amount=pruning_rate,
        )
    else:
        prune.global_unstructured(
                parameters_to_prune,
                pruning_method=prune.RandomUnstructured,
                amount=pruning_rate,
            )

def measure_module_sparsity(module, weight=True, bias=False, use_mask=False):

    num_zeros = 0
    num_elements = 0

    if use_mask == True:
        for buffer_name, buffer in module.named_buffers():
            if "weight_mask" in buffer_name and weight == True:
                num_zeros += torch.sum(buffer == 0).item()
                num_elements += buffer.nelement()
            if "bias_mask" in buffer_name and bias == True:
                num_zeros += torch.sum(buffer == 0).item()
                num_elements += buffer.nelement()
    else:
        for param_name, param in module.named_parameters():
            if "weight" in param_name and weight == True:
                num_zeros += torch.sum(param == 0).item()
                num_elements += param.nelement()
            if "bias" in param_name and bias == True:
                num_zeros += torch.sum(param == 0).item()
                num_elements += param.nelement()

    sparsity = num_zeros / num_elements * 100

    return num_zeros, num_elements, sparsity


def measure_global_sparsity(model,
                            weight=True,
                            bias=False,
                            conv2d_use_mask=False,
                            linear_use_mask=False):

    num_zeros = 0
    num_elements = 0

    for module_name, module in model.named_modules():

        if isinstance(module, torch.nn.Conv2d):

            module_num_zeros, module_num_elements, _ = measure_module_sparsity(
                module, weight=weight, bias=bias, use_mask=conv2d_use_mask)
            num_zeros += module_num_zeros
            num_elements += module_num_elements

        elif isinstance(module, torch.nn.Linear):

            module_num_zeros, module_num_elements, _ = measure_module_sparsity(
                module, weight=weight, bias=bias, use_mask=linear_use_mask)
            num_zeros += module_num_zeros
            num_elements += module_num_elements

    sparsity = num_zeros / num_elements * 100
    non_zero_parameters = num_elements - num_zeros

    return sparsity, num_elements, non_zero_parameters

def iterative_pruning_finetuning(model,args,train_loader,test_loader,device,
                                 pruning_rate, num_iteration, num_epoch_per_iteration,method):

    lr_decay= 0.1
    for i in range(num_iteration):

        prune_model(model,pruning_rate,method)
        pruning_rate *= 0.5

        optimizer = optim.Adam(model.parameters(), lr=args.lr*(lr_decay**i))
        for epoch in range(1, num_epoch_per_iteration+1):
            train(args, model, device, train_loader, optimizer, epoch)
            accuracy = test(model, device, test_loader, epoch)

    return model, accuracy

def Pareto_visualization(pruning_rates,sparsity_values,accuracy_values,active_parameters):

    plt.figure(figsize=(10, 6))

    for method in accuracy_values.keys():
            accuracy_vals = accuracy_values[method]
            param_vals = active_parameters[method]

            plt.scatter(param_vals, accuracy_vals, label=f'Global {method} Unstructured')
            for i, txt in enumerate(pruning_rates):
                plt.annotate(f'{txt}', (param_vals[i], accuracy_vals[i]), textcoords="offset points", xytext=(0,5), ha='center', fontsize=8)

            # Connect points for L1 and Random methods with a line
            if method == 'L1':
                for i in range(len(pruning_rates) - 1):
                    plt.plot(param_vals[i:i+2], accuracy_vals[i:i+2], color='blue', linestyle='dotted')
            elif method == 'Random':
                for i in range(len(pruning_rates) - 1):
                    plt.plot(param_vals[i:i+2], accuracy_vals[i:i+2], color='orange', linestyle='dotted')

    plt.xlim(left=0)
    plt.title('Accuracy vs. Number of Parameters for Different Pruning Ratios')
    plt.xlabel('Number of Parameters')
    plt.ylabel('Accuracy[%]')
    plt.legend()
    plt.grid(True)

    plt.xticks(plt.xticks()[0], map(int, plt.xticks()[0]))

    fig, ax = plt.subplots()

    for method in accuracy_values.keys():
        sparsity_vals = sparsity_values[method]

        ax.plot(pruning_rates, sparsity_vals, marker = 'o', label=f'Global {method} Unstructured')

    ax.set_xlabel('Pruning Ratio')
    ax.set_ylabel('Sparsity[%]')
    ax.set_title('Pruning Ratio vs. Sparsity')
    ax.legend()

    plt.show()

def main():
    # Training settings
    parser = argparse.ArgumentParser(description='PyTorch SVHN Example')
    parser.add_argument('--batch-size', type=int, default=128, metavar='N',
                        help='input batch size for training (default: 128)')
    parser.add_argument('--test-batch-size', type=int, default=1024, metavar='N',
                        help='input batch size for testing (default: 1024)')
    parser.add_argument('--epochs', type=int, default=30, metavar='N',
                        help='number of epochs to train (default: 30)')
    parser.add_argument('--lr', type=float, default=0.0001, metavar='LR',
                        help='learning rate (default: 0.0001)')
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='disables CUDA training')
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')
    parser.add_argument('--log-interval', type=int, default=200, metavar='N',
                        help='how many batches to wait before logging training status')

    args, unknown = parser.parse_known_args()

    use_cuda = not args.no_cuda and torch.cuda.is_available()

    torch.manual_seed(args.seed)

    device = torch.device("cuda" if use_cuda else "cpu")

    train_kwargs = {'batch_size': args.batch_size}
    test_kwargs = {'batch_size': args.test_batch_size}
    if use_cuda:
        cuda_kwargs = {'num_workers': 2,
                       'pin_memory': True,
                       'shuffle': True}
        train_kwargs.update(cuda_kwargs)
        test_kwargs.update(cuda_kwargs)


    test_transforms = transforms.Compose([transforms.ToTensor()])
    train_transforms = transforms.Compose([transforms.ToTensor()])

    dataset_train = datasets.SVHN('../data', split='train', download=True,
                       transform=train_transforms)
    dataset_test = datasets.SVHN('../data', split='test', download=True,
                       transform=test_transforms)
    train_loader = torch.utils.data.DataLoader(dataset_train,**train_kwargs)
    test_loader = torch.utils.data.DataLoader(dataset_test, **test_kwargs)

    model = VGG16().to(device)
    optimizer = optim.Adam(model.parameters(), lr=args.lr)
    #Training model
    for epoch in range(1, args.epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch)

    #summary(model, input_size=(3, 32, 32))

    pruning_rates = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
    unstructured_pruning_methods = ['Random','L1']
    num_iteration=2
    num_epoch_per_iteration=5

    sparsity_values = {method: [] for method in unstructured_pruning_methods}
    accuracy_values = {method: [] for method in unstructured_pruning_methods}
    total_parameters = {method: [] for method in unstructured_pruning_methods}
    active_parameters = {method: [] for method in unstructured_pruning_methods}

    #Pruning
    for pruning_rate in pruning_rates :
      # Perform pruning for each method with the same pruning ratio
      for method in unstructured_pruning_methods:

          new_model, accuracy = iterative_pruning_finetuning(model,args,train_loader,test_loader,device,
                                  pruning_rate,num_iteration,num_epoch_per_iteration,method)
          accuracy_values[method].append(accuracy)

          sparsity, total_params, active_params = measure_global_sparsity(
              new_model,
              weight=True,
              bias=False,
              conv2d_use_mask=True,
              linear_use_mask=True)
          sparsity_values[method].append(sparsity)
          total_parameters[method].append(total_params)
          active_parameters[method].append(active_params)

    # Print different values for each method

    print('\nPruning rates: ')
    print(*pruning_rates)
    for method in zip(sparsity_values.keys(), accuracy_values.keys(), active_parameters.keys()):
        sparsity_method = method[0]
        accuracy_method = method[1]
        active_params_method = method[2]

        sparsity_vals = sparsity_values[sparsity_method]
        accuracy_vals = accuracy_values[accuracy_method]
        active_params_vals = active_parameters[active_params_method]

        print(f"Pruning Method: {sparsity_method}")
        print("Sparsity:", sparsity_vals)
        print("Accuracy:", accuracy_vals)
        print("Active Parameters:", active_params_vals)
        print()

    Pareto_visualization(pruning_rates,sparsity_values,accuracy_values,active_parameters)

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt

sparsity_values = {
        'L1': [0.0, 26.897498800920438, 62.10366435383886, 86.58374797536368, 96.9088965993723, 99.56531284080981, 99.96591901835353, 99.99870337626545, 99.99998215655411, 100.0],
        'Random': [0.0, 14.500000475825223, 47.36620032622577, 77.45168054331627, 93.56019926608717, 98.8408362247646, 99.87828688168892, 99.99335331640664, 99.9998453568023, 99.99999702609234]
    }
accuracy_values = {
        'L1': [95.07529194837123, 94.8640135218193, 94.79486785494777, 94.34926244622004, 91.74477566072527, 80.50860479409957, 19.587430854333128, 19.587430854333128, 19.587430854333128, 19.587430854333128],
        'Random': [95.12138905961893, 94.96773202212661, 94.63352796558083, 94.07267977873387, 91.03027043638599, 76.02950215119853, 19.58358942839582, 19.587430854333128, 19.587430854333128, 19.587430854333128]
    }

active_parameters = {
        'L1': [33625792, 24581295, 12742943, 4511321, 1039408, 146167, 11460, 436, 6, 0],
        'Random': [33625792, 28750052, 17698532, 7582051, 2165434, 389778, 40927, 2235, 52, 1]
    }
pruning_rates = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

plt.figure(figsize=(10, 6))

for method in accuracy_values.keys():
    accuracy_vals = accuracy_values[method]
    param_vals = active_parameters[method]

    plt.scatter(param_vals, accuracy_vals, label=f'Global {method} Unstructured')

    # Add annotations for pruning rates
    for i, txt in enumerate(pruning_rates):
        plt.annotate(f'{txt}', (param_vals[i], accuracy_vals[i]), textcoords="offset points", xytext=(0, 5), ha='center', fontsize=8)

    # Connect points for L1 and Random methods with a line
    if method == 'L1':
        for i in range(len(pruning_rates) - 1):
            plt.plot(param_vals[i:i+2], accuracy_vals[i:i+2], color='blue', linestyle='dotted')
    elif method == 'Random':
        for i in range(len(pruning_rates) - 1):
            plt.plot(param_vals[i:i+2], accuracy_vals[i:i+2], color='orange', linestyle='dotted')

plt.title('Accuracy vs. Number of Parameters for Different Pruning Ratios')
plt.xlabel('Number of Parameters')
plt.ylabel('Accuracy[%]')
plt.legend()
plt.grid(True)
plt.xticks(plt.xticks()[0], map(int, plt.xticks()[0]))

fig, ax = plt.subplots()

for method in accuracy_values.keys():
    sparsity_vals = sparsity_values[method]

    ax.plot(pruning_rates, sparsity_vals, marker = 'o', label=f'Global {method} Unstructured')

ax.set_xlabel('Pruning Ratio')
ax.set_ylabel('Sparsity Value[%]')
ax.set_title('Sparsity vs Pruning Ratio')
ax.legend()
ax.grid(True)
ax.set_xticks(pruning_rates)

fig, ax1 = plt.subplots()

for method in accuracy_values.keys():
    accuracy_vals = accuracy_values[method]

    ax1.plot(pruning_rates, accuracy_vals, marker = 'o', label=f'Global {method} Unstructured')

ax1.set_xlabel('Pruning Ratio')
ax1.set_ylabel('Accuracy[%]')
ax1.set_title('Accuracy vs Pruning Ratio')
ax1.legend()
ax1.grid(True)
ax1.set_xticks(pruning_rates)

plt.show()